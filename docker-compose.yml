version: '3.8'

services:
  # PostgreSQL Database with pgvector extension
  postgres:
    image: ankane/pgvector:latest
    container_name: psscript-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-psscript}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/db/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./src/db/migrations:/docker-entrypoint-initdb.d/migrations
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:alpine
    container_name: psscript-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API server
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    container_name: psscript-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-4000}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-psscript}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_SSL: ${DB_SSL:-false}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-24h}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      REFRESH_TOKEN_EXPIRATION: ${REFRESH_TOKEN_EXPIRATION:-7d}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      AI_SERVICE_URL: http://ai-service:5000
      AI_SERVICE_API_KEY: ${AI_SERVICE_API_KEY}
      PGVECTOR_ENABLED: ${PGVECTOR_ENABLED:-true}
      VECTOR_DIMENSION: ${VECTOR_DIMENSION:-1536}
    ports:
      - "${PORT:-4000}:${PORT:-4000}"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs

  # Frontend application
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${API_URL:-http://localhost:4000/api}
    container_name: psscript-frontend
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "${FRONTEND_PORT:-5173}:80"

  # AI Service
  ai-service:
    build:
      context: ./src/ai
      dockerfile: Dockerfile
    container_name: psscript-ai-service
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4-turbo}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-psscript}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      VECTOR_DIMENSION: ${VECTOR_DIMENSION:-1536}
    ports:
      - "5000:5000"
    volumes:
      - ./logs:/app/logs

volumes:
  postgres_data:
  redis_data:
