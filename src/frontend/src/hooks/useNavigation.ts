import { useCallback } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { ROUTES, getRoute, matchesRoute } from '../constants/routes';\n\n/**\n * Enhanced navigation hook with utility functions\n * Provides consistent navigation patterns and route management\n */\nexport const useNavigation = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  /**\n   * Navigate to a specific route with optional parameters\n   */\n  const navigateTo = useCallback((route: string, params?: Record<string, string>, options?: { replace?: boolean }) => {\n    const finalRoute = params ? getRoute(route as any, params) : route;\n    navigate(finalRoute, options);\n  }, [navigate]);\n\n  /**\n   * Navigate back with fallback\n   */\n  const goBack = useCallback((fallbackRoute: string = ROUTES.DASHBOARD) => {\n    if (window.history.length > 1) {\n      navigate(-1);\n    } else {\n      navigate(fallbackRoute);\n    }\n  }, [navigate]);\n\n  /**\n   * Check if current path matches a route pattern\n   */\n  const isCurrentRoute = useCallback((routePattern: string): boolean => {\n    return matchesRoute(location.pathname, routePattern as any);\n  }, [location.pathname]);\n\n  /**\n   * Get current page breadcrumb data\n   */\n  const getBreadcrumbs = useCallback(() => {\n    const path = location.pathname;\n    const breadcrumbs: Array<{ label: string; path?: string }> = [];\n\n    // Always start with dashboard\n    breadcrumbs.push({ label: 'Dashboard', path: ROUTES.DASHBOARD });\n\n    // Add specific breadcrumbs based on current path\n    if (path.startsWith('/scripts')) {\n      breadcrumbs.push({ label: 'Scripts', path: ROUTES.SCRIPTS });\n      if (path !== ROUTES.SCRIPTS) {\n        if (path.includes('/edit') || matchesRoute(path, ROUTES.EDITOR_WITH_ID)) {\n          breadcrumbs.push({ label: 'Edit' });\n        } else if (matchesRoute(path, ROUTES.SCRIPT_DETAIL)) {\n          breadcrumbs.push({ label: 'Details' });\n        }\n      }\n    } else if (path.startsWith('/settings')) {\n      breadcrumbs.push({ label: 'Settings', path: ROUTES.SETTINGS });\n      const settingsPath = path.replace('/settings/', '');\n      if (settingsPath && settingsPath !== 'settings') {\n        const settingsLabels: Record<string, string> = {\n          'profile': 'Profile',\n          'appearance': 'Appearance',\n          'security': 'Security',\n          'notifications': 'Notifications',\n          'api': 'API',\n          'users': 'User Management'\n        };\n        breadcrumbs.push({ label: settingsLabels[settingsPath] || settingsPath });\n      }\n    } else if (path === ROUTES.AI_CHAT) {\n      breadcrumbs.push({ label: 'AI Assistant' });\n    } else if (path === ROUTES.DOCUMENTATION) {\n      breadcrumbs.push({ label: 'Documentation' });\n    }\n\n    return breadcrumbs;\n  }, [location.pathname]);\n\n  /**\n   * Navigate to script detail page\n   */\n  const navigateToScript = useCallback((scriptId: string) => {\n    navigateTo(ROUTES.SCRIPT_DETAIL, { id: scriptId });\n  }, [navigateTo]);\n\n  /**\n   * Navigate to script editor\n   */\n  const navigateToEditor = useCallback((scriptId?: string) => {\n    if (scriptId) {\n      navigateTo(ROUTES.EDITOR_WITH_ID, { id: scriptId });\n    } else {\n      navigateTo(ROUTES.EDITOR);\n    }\n  }, [navigateTo]);\n\n  /**\n   * Navigate to settings page\n   */\n  const navigateToSettings = useCallback((section?: string) => {\n    if (section) {\n      navigateTo(`/settings/${section}`);\n    } else {\n      navigateTo(ROUTES.SETTINGS);\n    }\n  }, [navigateTo]);\n\n  /**\n   * Handle unauthorized access\n   */\n  const handleUnauthorized = useCallback(() => {\n    navigateTo(ROUTES.UNAUTHORIZED, undefined, { replace: true });\n  }, [navigateTo]);\n\n  /**\n   * Check if user can access route (placeholder for future auth integration)\n   */\n  const canAccessRoute = useCallback((route: string): boolean => {\n    // Implement permission checks here\n    // For now, all routes are accessible\n    return true;\n  }, []);\n\n  /**\n   * Get page title for current route\n   */\n  const getCurrentPageTitle = useCallback((): string => {\n    const path = location.pathname;\n    \n    const titleMap: Record<string, string> = {\n      [ROUTES.DASHBOARD]: 'Dashboard',\n      [ROUTES.SCRIPTS]: 'Script Management',\n      [ROUTES.EDITOR]: 'Script Editor',\n      [ROUTES.UPLOAD]: 'Script Upload',\n      [ROUTES.ANALYSIS]: 'Script Analysis',\n      [ROUTES.AI_CHAT]: 'AI Assistant',\n      [ROUTES.CHAT_HISTORY]: 'Chat History',\n      [ROUTES.AI_FEATURES]: 'AI Features',\n      [ROUTES.AGENTIC_AI]: 'Agentic AI',\n      [ROUTES.AGENT_ORCHESTRATION]: 'Agent Orchestration',\n      [ROUTES.DOCUMENTATION]: 'Documentation',\n      [ROUTES.DOCUMENTATION_CRAWL]: 'Documentation Crawl',\n      [ROUTES.SETTINGS]: 'Settings',\n      [ROUTES.UI_DEMO]: 'UI Components Demo',\n      [ROUTES.LOGIN]: 'Login',\n      [ROUTES.REGISTER]: 'Register',\n      [ROUTES.UNAUTHORIZED]: 'Access Denied'\n    };\n\n    // Check exact matches first\n    if (titleMap[path]) {\n      return titleMap[path];\n    }\n\n    // Check pattern matches\n    if (matchesRoute(path, ROUTES.SCRIPT_DETAIL)) {\n      return 'Script Details';\n    }\n    if (matchesRoute(path, ROUTES.EDITOR_WITH_ID)) {\n      return 'Script Editor';\n    }\n    if (path.startsWith('/settings/')) {\n      const section = path.replace('/settings/', '');\n      const sectionTitles: Record<string, string> = {\n        'profile': 'Profile Settings',\n        'appearance': 'Appearance Settings',\n        'security': 'Security Settings',\n        'notifications': 'Notification Settings',\n        'api': 'API Settings',\n        'users': 'User Management'\n      };\n      return sectionTitles[section] || 'Settings';\n    }\n\n    return 'PSScript';\n  }, [location.pathname]);\n\n  return {\n    // Navigation functions\n    navigateTo,\n    goBack,\n    navigateToScript,\n    navigateToEditor,\n    navigateToSettings,\n    handleUnauthorized,\n    \n    // Route utilities\n    isCurrentRoute,\n    canAccessRoute,\n    getCurrentPageTitle,\n    getBreadcrumbs,\n    \n    // Current location info\n    currentPath: location.pathname,\n    currentSearch: location.search,\n    currentHash: location.hash,\n    location\n  };\n};