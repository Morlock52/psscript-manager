# SPARC Configuration for PSScript QA Review
version: "1.0"

sparc:
  # SPARC methodology settings
  methodology:
    phases:
      - name: systematic_planning
        duration: "10%"
        outputs: ["qa_plan", "test_strategy", "resource_allocation"]
        
      - name: analysis
        duration: "30%"
        outputs: ["findings", "metrics", "recommendations"]
        
      - name: refactoring
        duration: "40%"
        outputs: ["improved_code", "new_tests", "documentation"]
        
      - name: completion
        duration: "20%"
        outputs: ["validation", "reports", "deliverables"]
        
  # QA Review Configuration
  qa_review:
    scope:
      frontend:
        frameworks: ["React", "TypeScript", "TailwindCSS"]
        check_points:
          - component_architecture
          - state_management
          - routing
          - api_integration
          - error_boundaries
          - accessibility
          - responsive_design
          - performance
          
      backend:
        frameworks: ["Node.js", "Express", "TypeScript"]
        check_points:
          - api_design
          - authentication
          - authorization
          - input_validation
          - error_handling
          - database_operations
          - caching
          - security
          
      infrastructure:
        technologies: ["Docker", "PostgreSQL", "Redis", "Nginx"]
        check_points:
          - containerization
          - orchestration
          - database_config
          - caching_strategy
          - reverse_proxy
          - ssl_tls
          - logging
          - monitoring
          
    standards_2025:
      performance:
        - first_contentful_paint: "< 1.8s"
        - time_to_interactive: "< 3.8s"
        - cumulative_layout_shift: "< 0.1"
        - largest_contentful_paint: "< 2.5s"
        
      security:
        - owasp_compliance: "top_10_2025"
        - tls_version: ">= 1.3"
        - security_headers: ["CSP", "HSTS", "X-Frame-Options"]
        - dependency_scanning: "critical_zero_tolerance"
        
      accessibility:
        - wcag_level: "AA"
        - aria_compliance: true
        - keyboard_navigation: "full"
        - screen_reader: "compatible"
        
      code_quality:
        - test_coverage: ">= 80%"
        - cyclomatic_complexity: "< 10"
        - duplication: "< 3%"
        - lint_errors: 0
        
  # Testing Framework Configuration
  testing:
    unit:
      framework: "Jest"
      coverage_threshold:
        branches: 80
        functions: 80
        lines: 80
        statements: 80
        
    integration:
      framework: "Supertest"
      database: "test_containers"
      mock_external: true
      
    e2e:
      framework: "Playwright"
      browsers: ["chromium", "firefox", "webkit"]
      viewport_sizes:
        - mobile: "375x667"
        - tablet: "768x1024"
        - desktop: "1920x1080"
        
    performance:
      framework: "k6"
      scenarios:
        - name: "normal_load"
          vus: 100
          duration: "5m"
        - name: "stress_test"
          vus: 500
          duration: "10m"
        - name: "spike_test"
          vus: 1000
          duration: "2m"
          
    security:
      tools:
        - name: "OWASP ZAP"
          scan_type: "full"
        - name: "npm audit"
          fail_on: "high"
        - name: "snyk"
          monitor: true
          
  # Documentation Templates
  documentation:
    templates:
      startup_checklist:
        format: "markdown"
        sections:
          - prerequisites
          - environment_setup
          - dependency_installation
          - database_initialization
          - configuration
          - startup_commands
          - health_checks
          - troubleshooting
          
      technical_documentation:
        format: "markdown"
        sections:
          - executive_summary
          - architecture_overview
          - technology_stack
          - component_details
          - api_reference
          - database_schema
          - deployment_guide
          - security_measures
          - performance_considerations
          
      management_presentation:
        format: "marp"  # Markdown presentation
        slides:
          - title_slide
          - executive_summary
          - business_value
          - key_features
          - user_experience
          - technology_overview
          - security_compliance
          - performance_metrics
          - roadmap
          - roi_analysis
          
      training_materials:
        format: "markdown"
        modules:
          - getting_started
          - user_workflows
          - admin_functions
          - troubleshooting
          - best_practices
          - faq
          
  # Refactoring Rules
  refactoring:
    priorities:
      - security_vulnerabilities: "immediate"
      - broken_functionality: "immediate"
      - performance_bottlenecks: "high"
      - code_smells: "medium"
      - deprecations: "medium"
      - style_issues: "low"
      
    patterns:
      frontend:
        - convert_class_to_functional
        - implement_error_boundaries
        - optimize_re_renders
        - lazy_load_components
        - implement_suspense
        
      backend:
        - async_await_conversion
        - implement_dto_pattern
        - add_request_validation
        - implement_caching
        - optimize_queries
        
    modernization:
      - replace_callbacks_with_promises
      - use_optional_chaining
      - implement_nullish_coalescing
      - convert_commonjs_to_esm
      - add_typescript_strict
      
  # Swarm Agent Specializations
  swarm_specialization:
    qa_lead:
      skills: ["planning", "coordination", "reporting"]
      focus: "overall_quality"
      
    frontend_tester:
      skills: ["react", "typescript", "ui_testing", "accessibility"]
      tools: ["jest", "testing-library", "playwright"]
      
    backend_tester:
      skills: ["nodejs", "api_testing", "database", "integration"]
      tools: ["supertest", "jest", "postman"]
      
    security_auditor:
      skills: ["owasp", "penetration_testing", "vulnerability_analysis"]
      tools: ["zap", "burp", "nmap"]
      
    performance_analyst:
      skills: ["profiling", "optimization", "load_testing"]
      tools: ["k6", "lighthouse", "webpack-bundle-analyzer"]
      
    documentation_writer:
      skills: ["technical_writing", "diagramming", "user_experience"]
      tools: ["mermaid", "plantuml", "marp"]