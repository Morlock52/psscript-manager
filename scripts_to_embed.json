 [{"id" : 1, "name" : "Get System Information", "description" : "A simple script to collect and display system information", "content" : "# Get System Information\n# This script collects various system details and displays them in a formatted output\n\nfunction Get-SystemInfo {\n    [CmdletBinding()]\n    param()\n    \n    $ComputerSystem = Get-CimInstance -ClassName Win32_ComputerSystem\n    $OperatingSystem = Get-CimInstance -ClassName Win32_OperatingSystem\n    $Processor = Get-CimInstance -ClassName Win32_Processor\n    $LogicalDisk = Get-CimInstance -ClassName Win32_LogicalDisk -Filter \"DriveType=3\"\n    \n    $SystemInfo = [PSCustomObject]@{\n        ComputerName = $ComputerSystem.Name\n        Manufacturer = $ComputerSystem.Manufacturer\n        Model = $ComputerSystem.Model\n        OperatingSystem = $OperatingSystem.Caption\n        OSVersion = $OperatingSystem.Version\n        OSBuild = $OperatingSystem.BuildNumber\n        LastBoot = $OperatingSystem.LastBootUpTime\n        Uptime = (Get-Date) - $OperatingSystem.LastBootUpTime\n        InstalledRAM = [math]::Round($ComputerSystem.TotalPhysicalMemory / 1GB, 2)\n        Processor = $Processor.Name\n        LogicalCores = $Processor.NumberOfLogicalProcessors\n        PhysicalCores = $Processor.NumberOfCores\n        DiskInfo = foreach ($Disk in $LogicalDisk) {\n            [PSCustomObject]@{\n                Drive = $Disk.DeviceID\n                Size = [math]::Round($Disk.Size / 1GB, 2)\n                FreeSpace = [math]::Round($Disk.FreeSpace / 1GB, 2)\n                PercentFree = [math]::Round(($Disk.FreeSpace / $Disk.Size) * 100, 2)\n            }\n        }\n    }\n    \n    return $SystemInfo\n}\n\n$SystemInfo = Get-SystemInfo\n\n# Format output\nWrite-Host \"===== System Information =====\" -ForegroundColor Cyan\nWrite-Host \"Computer Name: $($SystemInfo.ComputerName)\" -ForegroundColor Green\nWrite-Host \"Manufacturer: $($SystemInfo.Manufacturer)\" -ForegroundColor Green\nWrite-Host \"Model: $($SystemInfo.Model)\" -ForegroundColor Green\nWrite-Host \"\"\nWrite-Host \"===== Operating System =====\" -ForegroundColor Cyan\nWrite-Host \"OS: $($SystemInfo.OperatingSystem)\" -ForegroundColor Green\nWrite-Host \"Version: $($SystemInfo.OSVersion)\" -ForegroundColor Green\nWrite-Host \"Build: $($SystemInfo.OSBuild)\" -ForegroundColor Green\nWrite-Host \"Last Boot: $($SystemInfo.LastBoot)\" -ForegroundColor Green\nWrite-Host \"Uptime: $($SystemInfo.Uptime.Days) days, $($SystemInfo.Uptime.Hours) hours, $($SystemInfo.Uptime.Minutes) minutes\" -ForegroundColor Green\nWrite-Host \"\"\nWrite-Host \"===== Hardware =====\" -ForegroundColor Cyan\nWrite-Host \"Processor: $($SystemInfo.Processor)\" -ForegroundColor Green\nWrite-Host \"Physical Cores: $($SystemInfo.PhysicalCores)\" -ForegroundColor Green\nWrite-Host \"Logical Cores: $($SystemInfo.LogicalCores)\" -ForegroundColor Green\nWrite-Host \"Installed RAM: $($SystemInfo.InstalledRAM) GB\" -ForegroundColor Green\nWrite-Host \"\"\nWrite-Host \"===== Disk Information =====\" -ForegroundColor Cyan\nforeach ($Disk in $SystemInfo.DiskInfo) {\n    Write-Host \"Drive $($Disk.Drive)\" -ForegroundColor Green\n    Write-Host \"  Size: $($Disk.Size) GB\" -ForegroundColor Green\n    Write-Host \"  Free Space: $($Disk.FreeSpace) GB\" -ForegroundColor Green\n    Write-Host \"  Percent Free: $($Disk.PercentFree)%\" -ForegroundColor Green\n    if ($Disk.PercentFree -lt 20) {\n        Write-Host \"  WARNING: Low disk space!\" -ForegroundColor Red\n    }\n    Write-Host \"\"\n}\n"}, {"id" : 2, "name" : "test-script", "description" : "No description provided", "content" : "# Enhanced PowerShell script for AI Analysis Testing\n# Author: Claude\n# Version: 2.0\n# Date: 2025-03-11\n\n# Import necessary modules\nImport-Module -Name Microsoft.PowerShell.Security\nImport-Module -Name Microsoft.PowerShell.Utility\n\nfunction Get-SystemInfo {\n    <#\n    .SYNOPSIS\n        Gets comprehensive system information.\n    \n    .DESCRIPTION\n        This function retrieves detailed system information including OS details,\n        CPU, memory, disk space, network configuration, and running processes.\n    \n    .EXAMPLE\n        Get-SystemInfo\n        \n        Returns complete system information for the local computer.\n    \n    .NOTES\n        Requires administrator privileges for certain operations.\n    #>\n    \n    [CmdletBinding()]\n    param(\n        [Parameter(Mandatory=$false)]\n        [switch]$ExportToFile,\n        \n        [Parameter(Mandatory=$false)]\n        [string]$OutputPath = \"$env:USERPROFILE\\Desktop\\SystemInfo.json\"\n    )\n    \n    begin {\n        Write-Verbose \"Starting system information collection...\"\n        $results = @{}\n    }\n    \n    process {\n        try {\n            # Get OS Information\n            $osInfo = Get-CimInstance -ClassName Win32_OperatingSystem\n            $results.OS = @{\n                Name = $osInfo.Caption\n                Version = $osInfo.Version\n                BuildNumber = $osInfo.BuildNumber\n                Architecture = $osInfo.OSArchitecture\n                LastBootTime = $osInfo.LastBootUpTime\n            }\n            \n            # Get CPU Information\n            $cpuInfo = Get-CimInstance -ClassName Win32_Processor\n            $results.CPU = @{\n                Name = $cpuInfo.Name\n                Cores = $cpuInfo.NumberOfCores\n                LogicalProcessors = $cpuInfo.NumberOfLogicalProcessors\n                MaxClockSpeed = $cpuInfo.MaxClockSpeed\n                LoadPercentage = $cpuInfo.LoadPercentage\n            }\n            \n            # Get Memory Information\n            $memoryInfo = Get-CimInstance -ClassName Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum\n            $totalMemoryGB = [math]::Round($memoryInfo.Sum / 1GB, 2)\n            $freeMemory = [math]::Round(($osInfo.FreePhysicalMemory / 1MB), 2)\n            $results.Memory = @{\n                TotalGB = $totalMemoryGB\n                FreeGB = $freeMemory\n                UsedPercent = [math]::Round((($totalMemoryGB - $freeMemory) / $totalMemoryGB) * 100, 2)\n            }\n            \n            # Get Disk Information\n            $diskInfo = Get-CimInstance -ClassName Win32_LogicalDisk -Filter \"DriveType=3\"\n            $results.Disks = @()\n            foreach ($disk in $diskInfo) {\n                $results.Disks += @{\n                    Drive = $disk.DeviceID\n                    SizeGB = [math]::Round($disk.Size / 1GB, 2)\n                    FreeGB = [math]::Round($disk.FreeSpace / 1GB, 2)\n                    UsedPercent = [math]::Round((($disk.Size - $disk.FreeSpace) / $disk.Size) * 100, 2)\n                }\n            }\n            \n            # Get Network Information\n            $networkInfo = Get-CimInstance -ClassName Win32_NetworkAdapterConfiguration -Filter \"IPEnabled='True'\"\n            $results.Network = @()\n            foreach ($adapter in $networkInfo) {\n                $results.Network += @{\n                    Description = $adapter.Description\n                    MACAddress = $adapter.MACAddress\n                    IPAddresses = $adapter.IPAddress\n                    Gateway = $adapter.DefaultIPGateway\n                    DNSServers = $adapter.DNSServerSearchOrder\n                }\n            }\n            \n            # Get running processes\n            $topProcesses = Get-Process | Sort-Object -Property CPU -Descending | Select-Object -First 5 -Property Name, CPU, WorkingSet\n            $results.TopProcesses = @()\n            foreach ($process in $topProcesses) {\n                $results.TopProcesses += @{\n                    Name = $process.Name\n                    CPUUsage = [math]::Round($process.CPU, 2)\n                    MemoryMB = [math]::Round($process.WorkingSet / 1MB, 2)\n                }\n            }\n        }\n        catch {\n            Write-Error \"Error collecting system information: $_\"\n            throw\n        }\n    }\n    \n    end {\n        if ($ExportToFile) {\n            try {\n                $results | ConvertTo-Json -Depth 5 | Out-File -FilePath $OutputPath -Force\n                Write-Output \"System information exported to $OutputPath\"\n            }\n            catch {\n                Write-Error \"Failed to export system information: $_\"\n            }\n        }\n        else {\n            return $results\n        }\n    }\n}\n\nfunction Test-RemoteConnection {\n    <#\n    .SYNOPSIS\n        Tests connectivity to remote systems.\n    \n    .DESCRIPTION\n        This function tests connectivity to remote systems using ping and TCP port tests.\n    \n    .PARAMETER Targets\n        Array of target hosts or IP addresses to test.\n    \n    .PARAMETER Ports\n        Array of ports to test on each target.\n    \n    .EXAMPLE\n        Test-RemoteConnection -Targets @(\"server1\", \"192.168.1.1\") -Ports @(80, 443)\n        \n        Tests connectivity to server1 and 192.168.1.1 on ports 80 and 443.\n    #>\n    \n    [CmdletBinding()]\n    param(\n        [Parameter(Mandatory=$true)]\n        [string[]]$Targets,\n        \n        [Parameter(Mandatory=$false)]\n        [int[]]$Ports = @(80, 443, 3389)\n    )\n    \n    $results = @{}\n    \n    foreach ($target in $Targets) {\n        Write-Verbose \"Testing connection to $target...\"\n        $pingResult = Test-Connection -ComputerName $target -Count 3 -Quiet\n        \n        $results[$target] = @{\n            PingSuccess = $pingResult\n            Ports = @{}\n        }\n        \n        if ($pingResult) {\n            foreach ($port in $Ports) {\n                try {\n                    $tcpClient = New-Object System.Net.Sockets.TcpClient\n                    $portOpen = $tcpClient.ConnectAsync($target, $port).Wait(1000)\n                    $results[$target].Ports[$port] = $portOpen\n                }\n                catch {\n                    $results[$target].Ports[$port] = $false\n                }\n                finally {\n                    if ($tcpClient) {\n                        $tcpClient.Dispose()\n                    }\n                }\n            }\n        }\n    }\n    \n    return $results\n}\n\n# Main script execution\nif ($args.Count -gt 0 -and $args[0] -eq \"-ExportSystemInfo\") {\n    Get-SystemInfo -ExportToFile -Verbose\n}\nelseif ($args.Count -gt 0 -and $args[0] -eq \"-TestNetwork\") {\n    $defaultTargets = @(\"google.com\", \"microsoft.com\", \"github.com\")\n    Test-RemoteConnection -Targets $defaultTargets -Verbose\n}\nelse {\n    # Display help information\n    $scriptInfo = @\"\n    \nPowerShell System Diagnostic Tool\n================================\nThis script provides system diagnostics and network testing functionality.\n\nCommands:\n---------\n* -ExportSystemInfo : Collects and exports system information to Desktop\n* -TestNetwork     : Tests connectivity to common internet services\n* (no parameters)  : Displays this help information\n\nExamples:\n---------\n.\\test-script.ps1 -ExportSystemInfo\n.\\test-script.ps1 -TestNetwork\n\n\"@\n    Write-Host $scriptInfo\n}\n"}, {"id" : 3, "name" : "Test Upload Script", "description" : "Testing the upload functionality", "content" : "# Test Upload Script\nWrite-Host \"Testing upload functionality\"\nGet-Date"}, {"id" : 4, "name" : "Test Script", "description" : "A simple test script", "content" : "Get-Date\n"}, {"id" : 6, "name" : "Process Viewer Script", "description" : "Shows top 5 processes with a greeting", "content" : "Write-Host \"Hello from PSScript!\"\nGet-Process | Select-Object -First 5"}, {"id" : 8, "name" : "Another Duplicate Test", "description" : "Testing enhanced duplicate response", "content" : "Get-Date\n"}, {"id" : 9, "name" : "Test Upload Review", "description" : "Testing upload for final review", "content" : "Write-Host \"Testing PSScript upload\"\n"}]

