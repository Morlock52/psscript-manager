# PSScript Quick Install - Copy and paste this entire block into your SSH session

curl -fsSL https://get.docker.com | sh && \
systemctl start docker && \
systemctl enable docker && \
curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && \
chmod +x /usr/local/bin/docker-compose && \
mkdir -p /opt/psscript && \
cd /opt/psscript && \
cat > docker-compose.yml << 'EOF'
version: '3.8'
services:
  frontend:
    image: nginx:alpine
    container_name: psscript_frontend
    ports:
      - "3002:80"
    volumes:
      - ./frontend:/usr/share/nginx/html
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    image: node:18-alpine
    container_name: psscript_backend
    ports:
      - "4000:4000"
    command: |
      sh -c "cat > /server.js << 'EOJS'
      const http = require('http');
      const server = http.createServer((req, res) => {
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
        res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
        
        if (req.method === 'OPTIONS') {
          res.writeHead(200);
          res.end();
          return;
        }
        
        const response = {
          status: 'ok',
          message: 'PSScript Backend Running',
          endpoint: req.url,
          time: new Date().toISOString()
        };
        
        res.writeHead(200, {'Content-Type': 'application/json'});
        res.end(JSON.stringify(response, null, 2));
      });
      
      server.listen(4000, '0.0.0.0', () => {
        console.log('PSScript test backend running on port 4000');
      });
      EOJS
      node /server.js"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: psscript_postgres
    environment:
      - POSTGRES_DB=psscript
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.0-alpine
    container_name: psscript_redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
EOF

mkdir -p frontend && \
cat > frontend/index.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PSScript Manager - Installation Success</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        .container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 40px;
            max-width: 600px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        h1 {
            font-size: 2.5em;
            margin-bottom: 20px;
            text-align: center;
        }
        .status {
            background: rgba(0, 255, 0, 0.1);
            border: 1px solid rgba(0, 255, 0, 0.3);
            border-radius: 10px;
            padding: 20px;
            margin: 20px 0;
            text-align: center;
        }
        .status.success { 
            background: rgba(0, 255, 0, 0.1);
            border-color: rgba(0, 255, 0, 0.3);
        }
        .status.error {
            background: rgba(255, 0, 0, 0.1);
            border-color: rgba(255, 0, 0, 0.3);
        }
        .info {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            padding: 20px;
            margin: 20px 0;
        }
        .info h3 {
            margin-bottom: 10px;
            color: #4fc3f7;
        }
        .info ul {
            list-style: none;
            padding-left: 20px;
        }
        .info li {
            margin: 8px 0;
            position: relative;
        }
        .info li:before {
            content: "‚ñ∏ ";
            position: absolute;
            left: -20px;
            color: #4fc3f7;
        }
        code {
            background: rgba(0, 0, 0, 0.3);
            padding: 2px 6px;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
        }
        .endpoints {
            margin-top: 20px;
            padding: 20px;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 10px;
        }
        .endpoint-item {
            display: flex;
            justify-content: space-between;
            margin: 10px 0;
            padding: 10px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 5px;
        }
        .endpoint-status {
            font-weight: bold;
        }
        .endpoint-status.online { color: #4caf50; }
        .endpoint-status.offline { color: #f44336; }
        .endpoint-status.checking { color: #ff9800; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ PSScript Manager</h1>
        
        <div class="status success">
            <h2>‚úÖ Docker Installation Successful!</h2>
            <p>All containers are running</p>
        </div>
        
        <div class="endpoints">
            <h3>Service Status:</h3>
            <div class="endpoint-item">
                <span>Frontend (Nginx)</span>
                <span class="endpoint-status online">‚óè Online</span>
            </div>
            <div class="endpoint-item">
                <span>Backend API</span>
                <span class="endpoint-status checking" id="backend-status">‚óè Checking...</span>
            </div>
            <div class="endpoint-item">
                <span>PostgreSQL Database</span>
                <span class="endpoint-status online">‚óè Online</span>
            </div>
            <div class="endpoint-item">
                <span>Redis Cache</span>
                <span class="endpoint-status online">‚óè Online</span>
            </div>
        </div>
        
        <div class="info">
            <h3>Next Steps:</h3>
            <ul>
                <li>Deploy the full PSScript application to <code>/opt/psscript</code></li>
                <li>Configure your OpenAI API key in the <code>.env</code> file</li>
                <li>Access the application at <code>http://74.208.184.195:3002</code></li>
                <li>Default login: <code>admin / admin123!</code></li>
            </ul>
        </div>
        
        <div class="info">
            <h3>Useful Commands:</h3>
            <ul>
                <li><code>docker-compose ps</code> - Check container status</li>
                <li><code>docker-compose logs -f</code> - View logs</li>
                <li><code>docker-compose restart</code> - Restart all services</li>
                <li><code>docker-compose down</code> - Stop all services</li>
            </ul>
        </div>
        
        <p style="text-align: center; margin-top: 20px; opacity: 0.7;">
            Server Time: <span id="time"></span>
        </p>
    </div>
    
    <script>
        // Update time
        function updateTime() {
            document.getElementById('time').textContent = new Date().toLocaleString();
        }
        updateTime();
        setInterval(updateTime, 1000);
        
        // Check backend
        function checkBackend() {
            fetch('http://74.208.184.195:4000/health')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('backend-status').textContent = '‚óè Online';
                    document.getElementById('backend-status').className = 'endpoint-status online';
                })
                .catch(error => {
                    // Try without /health endpoint
                    fetch('http://74.208.184.195:4000/')
                        .then(response => response.json())
                        .then(data => {
                            document.getElementById('backend-status').textContent = '‚óè Online';
                            document.getElementById('backend-status').className = 'endpoint-status online';
                        })
                        .catch(err => {
                            document.getElementById('backend-status').textContent = '‚óè Offline';
                            document.getElementById('backend-status').className = 'endpoint-status offline';
                        });
                });
        }
        
        // Check backend status every 5 seconds
        checkBackend();
        setInterval(checkBackend, 5000);
    </script>
</body>
</html>
EOF

# Configure firewall if UFW is available
if command -v ufw >/dev/null 2>&1; then
    ufw allow 22/tcp && \
    ufw allow 3002/tcp && \
    ufw allow 4000/tcp && \
    ufw allow 5432/tcp && \
    ufw allow 6379/tcp && \
    ufw allow 8000/tcp && \
    echo "y" | ufw enable
fi

# Start all services
docker-compose up -d && \
echo "" && \
echo "Waiting for services to start (20 seconds)..." && \
sleep 20 && \
echo "" && \
echo "==================================" && \
echo "PSScript Installation Complete!" && \
echo "==================================" && \
echo "" && \
docker-compose ps && \
echo "" && \
echo "Access the test page at:" && \
echo "  http://74.208.184.195:3002" && \
echo "" && \
echo "Backend API test:" && \
echo "  http://74.208.184.195:4000" && \
echo "" && \
echo "To check logs: docker-compose logs -f" && \
echo ""